require "rails_helper"

RSpec.describe "Weather Facade" do
  it 'find_forecast(location)', :vcr do
    response = WeatherFacade.find_forecast("Salt Lake City, UT")

    expect(response).to_not have_key(:location)

    response_data = response[:data]
    
    expect(response_data).to have_key(:id)
    expect(response_data[:id]).to eq(nil)
    expect(response_data).to have_key(:type)
    expect(response_data[:type]).to be_a(String)
    expect(response_data[:type]).to eq("forecast")
    expect(response_data).to have_key(:attributes)
    expect(response_data[:attributes]).to be_a(Hash)
    
    current_weather = response[:data][:attributes][:current_weather]

    expect(current_weather).to be_a(Hash)
    expect(current_weather.count).to eq(8)
    expect(current_weather).to have_key(:last_updated)
    expect(current_weather[:last_updated]).to be_a(String)
    expect(current_weather).to have_key(:temperature)
    expect(current_weather[:temperature]).to be_a(Float)
    expect(current_weather).to have_key(:feels_like)
    expect(current_weather[:feels_like]).to be_a(Float)
    expect(current_weather).to have_key(:humidity)
    expect(current_weather[:humidity]).to be_a(Integer)
    expect(current_weather).to have_key(:uvi)
    expect(current_weather[:uvi]).to be_a(Float)
    expect(current_weather).to have_key(:visibility)
    expect(current_weather[:visibility]).to be_a(Float)
    expect(current_weather).to have_key(:condition)
    expect(current_weather[:condition]).to be_a(String)
    expect(current_weather).to have_key(:icon)
    expect(current_weather[:icon]).to be_a(String)

    expect(current_weather.count).to_not eq(23)
    expect(current_weather).to_not have_key(:las_updated_epoch)
    expect(current_weather).to_not have_key(:wind_mph)
    expect(current_weather).to_not have_key(:wind_kph)
    expect(current_weather).to_not have_key(:wind_degrees)
    expect(current_weather).to_not have_key(:wind_dir)
    expect(current_weather).to_not have_key(:pressure_mb)
    expect(current_weather).to_not have_key(:pressure_in)
    expect(current_weather).to_not have_key(:precip_mm)
    expect(current_weather).to_not have_key(:precip_in)
    expect(current_weather).to_not have_key(:temp_c)
    expect(current_weather).to_not have_key(:temp_f)
    expect(current_weather).to_not have_key(:is_day)
    expect(current_weather).to_not have_key(:cloud)
    expect(current_weather).to_not have_key(:feelslike_c)
    expect(current_weather).to_not have_key(:feelslike_f)
    expect(current_weather).to_not have_key(:vis_km)
    expect(current_weather).to_not have_key(:vis_miles)
    expect(current_weather).to_not have_key(:uv)
    expect(current_weather).to_not have_key(:gust_mph)
    expect(current_weather).to_not have_key(:gust_kph)

    daily_weather = response[:data][:attributes][:daily_weather]

    expect(daily_weather).to be_a(Hash)
    expect(daily_weather).to have_key(:date)
    expect(daily_weather[:date]).to be_a(String)
    expect(daily_weather).to have_key(:sunrise)
    expect(daily_weather[:sunrise]).to be_a(String)
    expect(daily_weather).to have_key(:sunset)
    expect(daily_weather[:sunset]).to be_a(String)
    expect(daily_weather).to have_key(:max_temp)
    expect(daily_weather[:max_temp]).to be_a(Float)
    expect(daily_weather).to have_key(:min_temp)
    expect(daily_weather[:min_temp]).to be_a(Float)
    expect(daily_weather).to have_key(:condition)
    expect(daily_weather[:condition]).to be_a(String)
    expect(daily_weather).to have_key(:icon)
    expect(daily_weather[:icon]).to be_a(String)

    expect(daily_weather).to_not have_key(:maxtemp_c)
    expect(daily_weather).to_not have_key(:maxtemp_f)
    expect(daily_weather).to_not have_key(:mintemp_c)
    expect(daily_weather).to_not have_key(:mintemp_f)
    expect(daily_weather).to_not have_key(:avgtemp_c)
    expect(daily_weather).to_not have_key(:avgtemp_f)
    expect(daily_weather).to_not have_key(:maxwind_kph)
    expect(daily_weather).to_not have_key(:maxwind_mph)
    expect(daily_weather).to_not have_key(:totalprecip_mm)
    expect(daily_weather).to_not have_key(:totalprecip_in)
    expect(daily_weather).to_not have_key(:totalsnow_cm)
    expect(daily_weather).to_not have_key(:avgvis_km)
    expect(daily_weather).to_not have_key(:avgvis_miles)
    expect(daily_weather).to_not have_key(:avghumidity)
    expect(daily_weather).to_not have_key(:daily_will_it_rain)
    expect(daily_weather).to_not have_key(:daily_chance_of_rain)
    expect(daily_weather).to_not have_key(:daily_will_it_snow)
    expect(daily_weather).to_not have_key(:daily_chance_of_snow)



    hourly_weather = response[:data][:attributes][:hourly_weather]

    expect(hourly_weather).to be_a(Array)
    expect(hourly_weather.count).to eq(24)

    hourly_weather.each do |hour|
      expect(hour).to have_key(:time)
      expect(hour[:time]).to be_a(String)
      expect(hour).to have_key(:temperature)
      expect(hour[:temperature]).to be_a(Float)
      expect(hour).to have_key(:conditions)
      expect(hour[:conditions]).to be_a(String)
      expect(hour).to have_key(:icon)
      expect(hour[:icon]).to be_a(String)

      expect(hour).to_not have_key(:time_epoch)
      expect(hour).to_not have_key(:temp_c)
      expect(hour).to_not have_key(:is_day)
      expect(hour).to_not have_key(:wind_kph)
      expect(hour).to_not have_key(:wind_mph)
      expect(hour).to_not have_key(:wind_degree)
      expect(hour).to_not have_key(:dewpoint_c)
      expect(hour).to_not have_key(:dewpoint_f)
    end
  end

  it "find_multi_day(params)", :vcr do
    response = WeatherFacade.find_multi_day("Salt Lake City, UT")
    expect(response).to be_a(Hash)
    expect(response.count).to eq(3)
    expect(response).to have_key(:location)
    expect(response[:location]).to be_a(Hash)
    expect(response[:location].count).to eq(8)
    expect(response).to have_key(:current)
    expect(response[:current]).to be_a(Hash)
    
    
    expect(response).to have_key(:forecast)
    expect(response[:forecast][:forecastday].count).to eq(5)
    expect(response[:forecast][:forecastday].first).to have_key(:date)
    expect(response[:forecast][:forecastday].first).to have_key(:date_epoch)
    expect(response[:forecast][:forecastday].first).to have_key(:day)
    expect(response[:forecast][:forecastday].first).to have_key(:astro)
    expect(response[:forecast][:forecastday].first).to have_key(:hour)
    expect(response[:forecast][:forecastday].first[:hour]).to be_a(Array)
    expect(response[:forecast][:forecastday].first[:hour].count).to eq(24)

    expect(response).to_not have_key(:maxtemp_c)
    expect(response).to_not have_key(:maxtemp_f)
    expect(response).to_not have_key(:mintemp_c)
    expect(response).to_not have_key(:mintemp_f)
    expect(response).to_not have_key(:avgtemp_c)
    expect(response).to_not have_key(:avgtemp_f)
    expect(response).to_not have_key(:maxwind_kph)
    expect(response).to_not have_key(:maxwind_mph)
    expect(response).to_not have_key(:totalprecip_mm)
    expect(response).to_not have_key(:totalprecip_in)
    expect(response).to_not have_key(:totalsnow_cm)
    expect(response).to_not have_key(:avgvis_km)
    expect(response).to_not have_key(:avgvis_miles)
    expect(response).to_not have_key(:avghumidity)
    expect(response).to_not have_key(:daily_will_it_rain)
    expect(response).to_not have_key(:daily_chance_of_rain)
    expect(response).to_not have_key(:daily_will_it_snow)
    expect(response).to_not have_key(:daily_chance_of_snow)
    expect(response).to_not have_key(:last_updated_epoch)
    expect(response).to_not have_key(:wind_mph)
    expect(response).to_not have_key(:wind_kph)
    expect(response).to_not have_key(:wind_degrees)
    expect(response).to_not have_key(:wind_dir)
    expect(response).to_not have_key(:pressure_mb)
    expect(response).to_not have_key(:pressure_in)
    expect(response).to_not have_key(:precip_mm)
    expect(response).to_not have_key(:precip_in)
    expect(response).to_not have_key(:temp_c)
    expect(response).to_not have_key(:temp_f)
    expect(response).to_not have_key(:is_day)
    expect(response).to_not have_key(:cloud)
    expect(response).to_not have_key(:feelslike_c)
    expect(response).to_not have_key(:feelslike_f)
    expect(response).to_not have_key(:vis_km)
    expect(response).to_not have_key(:vis_miles)
    expect(response).to_not have_key(:uv)
    expect(response).to_not have_key(:gust_mph)
    expect(response).to_not have_key(:gust_kph)
  end
end